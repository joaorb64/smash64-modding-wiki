{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hi</p>"},{"location":"Wiki/","title":"Wiki Home","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"Wiki/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Wiki/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Wiki/Getting%20Started/Tools/","title":"Tools","text":""},{"location":"Wiki/Getting%20Started/Tools/#goldeditor-geditor","title":"GoldEditor (GEditor)","text":"<p>Linux or mac? -&gt; Virtual Machine :(</p>"},{"location":"Wiki/Getting%20Started/Tools/#3d-modelling-software","title":"3d modelling software","text":"<p>Blender, maya</p>"},{"location":"Wiki/Getting%20Started/Tools/#extra","title":"Extra","text":"<p>image editor, fbx converter</p>"},{"location":"Wiki/characters/addingexternalfiletocharacter/","title":"Adding external files to characters","text":"<p>A lot of times you can just replace files that are not being used anymore in the character's <code>main</code> file <code>reqlist</code>. So for a character based on Captain Falcon, you have pointers to Falcon Punch Graphic and Blue Falcon on his reqlist that can be replaced by the new file ID and will work.</p>"},{"location":"Wiki/characters/addingexternalfiletocharacter/#adding-extra-external-files-to-a-character","title":"Adding extra external files to a character","text":"<p>Sometimes you need to add more files than you have easy slots. That's when editing the <code>main</code> file is needed.</p> <p>First, export the character's <code>main</code> file, <code>reqlist</code>, and <code>ParseTree</code>.</p> <p>In the <code>ParseTree</code> you'll notice the file has 2 lists: one for internal files, and one for external files. Here, we're interested in external files. All these 4 digit pointers at the beginning of each line point towards an entry in <code>main.bin</code>, in the format <code>XXXX * 4 = Address in main.bin</code>. And if you go in your main file, you'll notice that in <code>XXXX * 4</code> you'll find the reference to the next pointer in the list, and so on until the last file where you'll have a <code>FFFF</code> demarking that's the last element in the linked list.</p> <p>To add an extra external file, you'll have to:</p> <ul> <li>At the end of the file, add the new last entry we're adding to the external file reqlist. Here we have to start with <code>FFFF</code> because it's going to be the last entry in the list. Follow that with <code>4 * YYYY</code> where <code>YYYY</code> is the pointer to what you want to import from the external file.<ul> <li>If the file you're adding has a reqlist, <code>0000</code> will do (projectile hitbox file for example). That would mean adding <code>FFFF0000</code> at the end of the file.</li> <li>In case of GFX like Falcon Punch clones, you'll need the pointer to the <code>display list</code> in that file multiplied by 4.</li> </ul> </li> <li>Get the address to the final element in the external file list from the ParseTree. Multiply what's in the ParseTree by 4 to get the actual address you have to go.</li> <li>Go into the <code>main.bin</code> file at the address you calculated. You'll know it's correct because you'll find <code>FFFF</code> at this address since it's the last file in the list.</li> <li>Update this <code>FFFF</code> to be the address where you added your <code>FFFF</code> entry before divided by 4. This means that what was the last entry is now pointing towards your new last entry.</li> <li>Open the <code>reqlist</code> and add a new entry at the end pointing towards your external file.</li> </ul>"},{"location":"Wiki/characters/animationexporting/","title":"Animation Exporting","text":"<p>Using GE you can export animations in the .bin and .fbx formats.</p> <p>BIN animations are in the game's internal format.</p> <p>FBX animations are in a format that can be edited in most 3d animation software. Note that GE exports in a proprietary FBX format that needs to be converted before being compatible with most 3d software. To convert the models, use NOESIS.</p>"},{"location":"Wiki/characters/animationflags/","title":"Animation Flags","text":"<p>Animation Flags are set when importing an animation. They define some settings that have effect ingame such as: root bone movement, ignore grab bone animation, etc.</p> <p>Using unmatched settings when playing an animation can cause the game to crash.</p> <p>Animation flags are set in the TODO textbox while importing an animation.</p>"},{"location":"Wiki/characters/animationimporting/","title":"Animation Importing","text":"<p>The simplest way to import animations is by overwriting the base character's animation by yours for the target action. This makes it easier to get the correct animation flags and can help with animation sizes if you're trying to make something similar to vanilla 64.</p>"},{"location":"Wiki/characters/animationimporting/#special-bones-do-not-animate","title":"Special bones (do not animate!)","text":"<p>Some of the model's bones should not be animated because they work as internal control bones (special parts). If you animate those bones, the editor will warn you and will still import, but these bones will NOT animate. With that, some poses will look wrong. It's recommended that you hide all special bones in your 3d software when animating to avoid animating special parts by mistake.</p> <p>Export the animation as FBX in your 3d software. Make sure to not add leaf bones and to export using the correct fps Select the animation you want to overwrite in vanilla Make sure you have the animation flags set as needed Import your FBX file Preview the animation to check for any issues</p>"},{"location":"Wiki/characters/animationimporting/#animation-durations","title":"Animation durations","text":"<p>TODO, dropping values here for now</p>"},{"location":"Wiki/characters/animationimporting/#ledge-getup-options","title":"Ledge getup options","text":"<p>All characters have the same total time for these animations. You can have different combinations, though. It always starts with a shared quick/slow animation, followed by each option's animations.</p> <p>Captain Falcon: cliffQuick 19 (shared) cliffClimbQuick1 9 cliffClimbQuick2 6 attack1 7 attack2 33 = 40 escape1 5 escape2 21 = 26</p> <p>cliffSlow 50 (shared) cliffClimbSlow1 7 cliffClimbSlow2 12 attack1 18 attack2 24 = 42 escape1 12 escape2 29 = 41</p>"},{"location":"Wiki/characters/animationimporting/#possible-issues","title":"Possible issues","text":"<ul> <li>The model looks broken: this happens in cases such as:<ul> <li>Changing animation flags after importing the animation - in these cases, just reimport</li> <li>Imported animation's bones don't match your model - either you exported your FBX file with extra bones by accident or forgot to import your new skeleton, in case you're editing the model's bones.</li> </ul> </li> <li>The animation is too long/short: check your 3d software's fps settings when exporting the FBX</li> <li>The game is crashing: your animation is probably too long. Make the animation shorter or decrease the number of keyframes. Note that your 3d software might also be keying all bones on all frames, (which happens by default in Blender).</li> <li>Some poses do not look right: you might have animated Special Bones.</li> </ul>"},{"location":"Wiki/characters/characterRigModification/","title":"Character Rig creation/update and importing","text":""},{"location":"Wiki/characters/characterRigModification/#step-0-important-info","title":"Step 0) Important info","text":"<p>The rig you end up modifying must follow the basic character structure. It must have proper socket joints for the arms, legs and feet. The rig can also not be any larger than 32 bones. You are limited to HEX 20, Maya Room FBXASC0512, Blender Bone 32. </p>"},{"location":"Wiki/characters/characterRigModification/#step-1-after-making-your-rig-and-exporting-only-your-skeleton-structure","title":"Step 1) After making your rig and exporting ONLY your skeleton structure.","text":"<p>Import Rig Select your rig and import it. The model should distort to the new rig. Now we need to make Smash 64 accept the new structure.</p>"},{"location":"Wiki/characters/characterRigModification/#step-2-update-the-skipped-parts-bitflag","title":"Step 2) Update the skipped parts bitflag","text":"<p>We now need to updat ethe skipped parts bitflag. To find it, click attribute editor.</p> <p>For the sockets, we need to make sure the correct ones are set. Sockets are the joints on the mesh that can be considered \"Containers\" so to speak. There is a arm socket, leg socket, and ankle socket. We take the hex value provided and convert it into binary. Hexadecimal \u2192 1042520000000000 Binary \u2192 00010000 01000010 01010010 00000000 00000000 00000000 00000000 00000000</p> <p>If we look at this compared to the Bone structure for Mario (Not including top joint)</p> Blender Bone Part # Maya Hex/Room Joint Name Function Binary Bit Flag 0 Part00 FBXASC048 Main bone base 0 1 Part01 FBXASC049 Hips (No Model attached) 0 2 Part02 FBXASC050 Chest 0 3 Part03 FBXASC051 Socket Joint Left Arm 1 4 Part04 FBXASC052 Left Upper Arm mesh 0 5 Part05 FBXASC053 Left Lower Arm mesh 0 6 Part06 FBXASC054 Left Hand 0 7 Part07 FBXASC055 Neck (No model attached) 0 8 Part08 FBXASC056 Head 0 9 Part09 FBXASC057 Socket Joint Right Arm 1 10 Part0A FBXASC0490 Right Upper Arm mesh 0 11 Part0B FBXASC0491 Right Lower Arm mesh 0 12 Part0C FBXASC0492 Right Hand 0 13 Part0D FBXASC0493 item joint (Where items are attached to) 0 14 Part0E FBXASC0494 Socket Left Joint leg 1 15 Part0F FBXASC0495 Left Upper Leg mesh 0 16 Part10 FBXASC0496 Left Lower Leg mesh 0 17 Part11 FBXASC0497 Left Ankle Joint 1 18 Part12 FBXASC0498 Left Foot 0 19 Part13 FBXASC0499 Socket Right Joint leg 1 20 Part14 FBXASC0500 Right Upper Leg mesh 0 21 Part15 FBXASC0501 Right Lower Leg mesh 0 22 Part16 FBXASC0502 Right Ankle Joint 1 23 Part17 FBXASC0503 Right Foot 0 24 Part18 FBXASC0504 Large item joint 0 <p>For Brain, the flags are updated as such</p> Blender Bone Part # Maya Hex/Room Joint Name Function Binary Bit Flag 0 Part00 FBXASC048 Main bone base 0 1 Part01 FBXASC049 Hips (No Model attached) 0 2 Part02 FBXASC050 Chest 0 3 Part03 FBXASC051 Socket Joint Left Arm 1 4 Part04 FBXASC052 Left Upper Arm mesh 0 5 Part05 FBXASC053 Left Lower Arm mesh 0 6 Part06 FBXASC054 Left Hand 0 7 Part07 FBXASC055 item joint (Where items are attached to) 0 8 Part08 FBXASC056 Potential Witheld Magic Part 0 9 Part09 FBXASC057 Neck (No model attached) 0 10 Part0A FBXASC0490 Head 0 11 Part0B FBXASC0491 Hair mesh 0 12 Part0C FBXASC0492 Cape upper Mesh 0 13 Part0D FBXASC0493 Cape Lower Mesh 0 14 Part0E FBXASC0494 Socket Joint Right Arm 1 15 Part0F FBXASC0495 Right Upper Arm mesh 0 16 Part10 FBXASC0496 Right Lower Arm mesh 0 17 Part11 FBXASC0497 Right Hand 0 18 Part12 FBXASC0498 Staff Mesh 0 19 Part13 FBXASC0499 Potential Withheld Magic Part 0 20 Part14 FBXASC0500 Socket Left Joint leg 1 21 Part15 FBXASC0501 Left Upper Leg mesh 0 22 Part16 FBXASC0502 Left Lower Leg mesh 0 23 Part17 FBXASC0503 Left Ankle Joint 1 24 Part18 FBXASC0504 Left Foot 0 25 Part19 FBXASC0505 Socket Right Joint leg 1 26 Part1A FBXASC0506 Right Upper Leg mesh 0 27 Part1B FBXASC0507 Right Lower Leg mesh 0 28 Part1C FBXASC0508 Right Ankle Joint 1 29 Part1D FBXASC0509 Right Foot 0 30 Part1E FBXASC0510 Large item joint 0 <p>Binary \u2192 00010000 00000010 00001001 01001000 00000000 00000000 00000000 00000000 Hexadecimal \u2192 1002094800000000</p>"},{"location":"Wiki/characters/characterRigModification/#step-3-now-we-need-to-update-the-withheld-parts-section","title":"Step 3) Now we need to update the withheld parts section.","text":"<p>We have to take that withheld part and set it to the new bone structure. So we need to modify the withheld bitflag</p> <p>\"withheld part bitflag\" convert it the hex to binary using https://www.asciitohex.com/ going down from the hierarchy, disable any joint you've added ex  if you have arm-arm2-arm3 head-head2-head3(new) arm-arm2-arm3 you'd disable it in the bit flag so it will look something like 111110111 where 0 is disabled and 1 is enabled</p> <p>Our goal Is 2 fold. Making sure all withheld parts are accounted for and making sure all animations are mapped to the correct bones. This is a two step process. </p> <p>For the first step, we want to set ALL new added bones to withheld parts, being setting them to 0. Make sure it matches the old structure. Even if some bones have gain a new purpose (such as for Brian, the staff bone being the old item joint)</p> <p>Lets Break these down again for instruction:</p> <p>Withheld \u2192 FFFFFF0000000000 Binary \u2192 11111111 11111111 11111111 00000000 00000000 00000000 00000000 00000000</p> Blender Bone Part # Maya Hex/Room Joint Name Function Binary Bit Flag 0 Part00 FBXASC048 Main bone base 1 1 Part01 FBXASC049 Hips (No Model attached) 1 2 Part02 FBXASC050 Chest 1 3 Part03 FBXASC051 Socket Joint Left Arm 1 4 Part04 FBXASC052 Left Upper Arm mesh 1 5 Part05 FBXASC053 Left Lower Arm mesh 1 6 Part06 FBXASC054 Left Hand 1 7 Part07 FBXASC055 Neck (No model attached) 1 8 Part08 FBXASC056 Head 1 9 Part09 FBXASC057 Socket Joint Right Arm 1 10 Part0A FBXASC0490 Right Upper Arm mesh 1 11 Part0B FBXASC0491 Right Lower Arm mesh 1 12 Part0C FBXASC0492 Right Hand 1 13 Part0D FBXASC0493 item joint (Where items are attached to) 1 14 Part0E FBXASC0494 Socket Left Joint leg 1 15 Part0F FBXASC0495 Left Upper Leg mesh 1 16 Part10 FBXASC0496 Left Lower Leg mesh 1 17 Part11 FBXASC0497 Left Ankle Joint 1 18 Part12 FBXASC0498 Left Foot 1 19 Part13 FBXASC0499 Socket Right Joint leg 1 20 Part14 FBXASC0500 Right Upper Leg mesh 1 21 Part15 FBXASC0501 Right Lower Leg mesh 1 22 Part16 FBXASC0502 Right Ankle Joint 1 23 Part17 FBXASC0503 Right Foot 1 24 Part18 FBXASC0504 Large item joint 0 <p>Update the binary to this temporary bone structure.  </p> Blender Bone Part # Maya Hex/Room Joint Name Function Binary Bit Flag 0 Part00 FBXASC048 Main bone base 1 1 Part01 FBXASC049 Hips (No Model attached) 1 2 Part02 FBXASC050 Chest 1 3 Part03 FBXASC051 Socket Joint Left Arm 1 4 Part04 FBXASC052 Left Upper Arm mesh 1 5 Part05 FBXASC053 Left Lower Arm mesh 1 6 Part06 FBXASC054 Left Hand 1 7 Part07 FBXASC055 item joint (Where items are attached to) 0 8 Part08 FBXASC056 Potential Witheld Magic Part 0 9 Part09 FBXASC057 Neck (No model attached) 1 10 Part0A FBXASC0490 head 1 11 Part0B FBXASC0491 Hair mesh 0 12 Part0C FBXASC0492 Cape Upper Mesh 0 13 Part0D FBXASC0493 Cape Lower Mesh 0 14 Part0E FBXASC0494 Socket Joint Right arm 1 15 Part0F FBXASC0495 Right Upper Arm mesh 1 16 Part10 FBXASC0496 Right Lower Arm mesh 1 17 Part11 FBXASC0497 Right Hand 1 18 Part12 FBXASC0498 Staff Mesh 1 19 Part13 FBXASC0499 Potential Withheld Magic Part 0 20 Part14 FBXASC0500 Socket Left Joint leg 1 21 Part15 FBXASC0501 Left Upper Leg mesh 1 22 Part16 FBXASC0502 Left Lower Leg mesh 1 23 Part17 FBXASC0503 Left Ankle Joint 1 24 Part18 FBXASC0504 Left Foot 1 25 Part19 FBXASC0505 Socket Right Joint leg 1 26 Part1A FBXASC0506 Right Upper Leg mesh 1 27 Part1B FBXASC0507 Right Lower Leg mesh 1 28 Part1C FBXASC0508 Right Ankle Joint 1 29 Part1D FBXASC0509 Right Foot 1 30 Part1E FBXASC0510 Large item joint 0 <p>Binary \u2192 11111110 01100011 11101111 11111100 00000000 00000000 00000000 00000000 Hexadecimal \u2192 fe63effc00000000</p> <p>Update the new withheld parts and close. This structure is specifically used to export old animations for us to reimport. Given we changed the rig, the editor is putting specific animations to the old bones, which will cause a crash. By using this temporary structure, we are exporting the animations in a way for the editor to place them on the correct bone.</p> <p>Export all animations. As they are messed up and we need to reset them.</p> <p>After that, we update the withheld attribute again to the final rigs proper withheld position. For Brian I added in two magic bones that would be called in for attacks. One on each arm. Those are truly withheld parts, so the new value would be</p> Blender Bone Part # Maya Hex/Room Joint Name Function Binary Bit Flag 0 Part00 FBXASC048 Main bone base 1 1 Part01 FBXASC049 Hips (No Model attached) 1 2 Part02 FBXASC050 Chest 1 3 Part03 FBXASC051 Socket Joint Left Arm 1 4 Part04 FBXASC052 Left Upper Arm mesh 1 5 Part05 FBXASC053 Left Lower Arm mesh 1 6 Part06 FBXASC054 Left Hand 1 7 Part07 FBXASC055 item joint (Where items are attached to) 1 8 Part08 FBXASC056 Potential Witheld Magic Part 0 9 Part09 FBXASC057 Neck (No model attached) 1 10 Part0A FBXASC0490 head 1 11 Part0B FBXASC0491 Hair mesh 1 12 Part0C FBXASC0492 Cape Upper Mesh 1 13 Part0D FBXASC0493 Cape Lower Mesh 1 14 Part0E FBXASC0494 Socket Joint Right arm 1 15 Part0F FBXASC0495 Right Upper Arm mesh 1 16 Part10 FBXASC0496 Right Lower Arm mesh 1 17 Part11 FBXASC0497 Right Hand 1 18 Part12 FBXASC0498 Staff Mesh 1 19 Part13 FBXASC0499 Potential Withheld Magic Part 0 20 Part14 FBXASC0500 Socket Left Joint leg 1 21 Part15 FBXASC0501 Left Upper Leg mesh 1 22 Part16 FBXASC0502 Left Lower Leg mesh 1 23 Part17 FBXASC0503 Left Ankle Joint 1 24 Part18 FBXASC0504 Left Foot 1 25 Part19 FBXASC0505 Socket Right Joint leg 1 26 Part1A FBXASC0506 Right Upper Leg mesh 1 27 Part1B FBXASC0507 Right Lower Leg mesh 1 28 Part1C FBXASC0508 Right Ankle Joint 1 29 Part1D FBXASC0509 Right Foot 1 30 Part1E FBXASC0510 Large item joint 0 <p>Binary \u2192 11111111 01111111 11101111 11111100 00000000 00000000 00000000 00000000 Hexadecimal \u2192 ff7feffc00000000 And then reimport all the animations again. This will fix the animations, even if some are rotated odd. </p>"},{"location":"Wiki/characters/characterRigModification/#step-4-fixing-the-withheld-parts-table","title":"Step 4) Fixing the Withheld Parts Table.","text":"<p>For this next section, we will be making changes to the bone structure though the editor and through HEX editing. It is important to note for this section and the special parts section later that Smash 64 in-engine will add +4 to the bone ids. This means that when we are adding/editing the rig values, we will need to add +4 to the bone id.</p> <p>For example, if I am setting the item joint pointer, and it is bone 07,  then I will set the value to 07+04 = 0B.</p> <p>Now we want to fix the Withheld parts table. </p> <p>Click Edit attribute</p> <p>We are going to modify the withheld parts section.  Click Edit attribute</p> <p>There will be many parts present in the section, so lets break them down.</p> Part Animation Flag Part 0000 Part that correspond to Animation Flags 0x80000000, DONT CHANGE Part 0001 Part that correspond to Animation Flags 0x40000000, DONT CHANGE Part 0002 Part that correspond to Animation Flags 0x20000000, DONT CHANGE Part 0003 This part is associated with the Large Item joint. It is always the final bone in the rig. If we look back to our rig structures above, for MARIO, the large item joint was Part18, which means the value present should be Part18+04 = Part1C. For our rig, it would be Part1E+04 = Part22 <p>For added withheld parts, such as Brian's Potential Witheld Magic Parts, i.e. the ones we set the bitflag to 0 for in prior steps, we need to also set the bone part correct using the above method. While we are updating the correct bone part, remember that the newly added withheld parts also need their parent bones values updated. </p> <p>For all added withheld parts, the Unknown values are always the same and are as follows: Unknown 1 - this is always 00000001 Unknown 2 - this is always 00000000 Make sure to update each part.</p> Part Animation Flag Part 0004 For our rig, Potential Withheld Magic Part, it would be Part08+04 = Part0C. The Parent joint for the added withheld part is Part06+04 = Part0A <p>| Part 0005   | For our rig, Potential Withheld Magic Part, it would be Part13+04 = Part17.                  The Parent joint for the added withheld part is Part12+04 = Part016 |</p> <p>Withheld Parts 0003 corresponds to the animation flag 0x10000000, these animation flags are what is responsible for telling the animation to use that withheld part... so for Withheld Parts 0004 the flag would be 0x08000000, and then 0x04000000 for Withheld Parts 0005 etc.</p> <p>This is important to know for later. Here is a table explaining the concept:</p> Part Animation Flag Part 0000 Part that correspond to Animation Flags 0x80000000 Part 0001 Part that correspond to Animation Flags 0x40000000 Part 0002 Part that correspond to Animation Flags 0x20000000 Part 0003 Part that correspond to Animation Flags 0x10000000 Part 0004 Part that correspond to Animation Flags 0x80000000 Part 0005 Part that correspond to Animation Flags 0x40000000 Part 0006 Part that correspond to Animation Flags 0x20000000 Part 0007 Part that correspond to Animation Flags 0x10000000 Part 0008 Part that correspond to Animation Flags 0x80000000 Etc."},{"location":"Wiki/characters/characterRigModification/#step-5-hex-editing-the-character-file-to-fix-unknown-value-points","title":"Step 5) Hex editing the character file to fix Unknown Value points","text":"<p>Now we have done most of the work needed in the editor, we must modify the character main file. This will resolve the final issues of the rig. To get the character main file, we need to go to either the Animation editor and click export main file</p> <p>or go to the Game configuration window and export the main file from there</p> <p>Game configuration is how we will import the file after we make our changes. Export the \"Parse DisplayLists to TextFile\" button in the \"Special Functions\" section of the Edit Model window, this text file has some important info in it we can use later.</p> <p>in the CharacterDisplayLists.txt file we saved earlier, scroll down to the \"Unknown Value Pointers\" section:</p> <p>in this section we are looking for XXXX (0330): ... Head Part? (-4), this is where the Head Bone ID is defined for dynamic textures, XXXX is the offset in the file so in Brians case we go to 0198 and change the instances of Part08+04 = Part0C to Part0A+04=Part0E since the head bone was changed.</p> <p>Load the characterMain.bin file we exported into HxD. Also set the word size to 4. Makes it eaiser to read and modify.</p> <p>Find the offset we found from the CharacterDisplayLists.txt. For Brian, it was 0198. HxD is read as the all the numbers up to the last one being the row, i.e. 019X, and the X being the offset. Given X is 8, we are modifying the third column. As we see, 0C is present, which was Mario's head. </p> <p>We replace that with 0E, which is Brian's head.</p> <p>If you see multiple 0C values, it means there are multiple textures that are referenced and all need to be updated. Here is an example from a different character rig associated with Brian. </p> <p>This character file is based on Link. Link has three dynamic textures on his body, being his Both his eyes and his mouth. All those are separate textures, meaning that you have to update the head bone in the three locations. </p> <p>If one wants to add more dynamic textures to a character, One needs to shift pointers in the rom. For Brian, I do not have any extra dynamic textures, as I only swap his face texture. </p> <p>For completion sake, I am listing the steps for adding a new dynamic texture hypothetically. If we were to add a new dynamic texture, we need to modify the bone in the character file, adding in the bone and the pointers. </p> <p>Looking at the Head texture location from before, we see that 0E0000 is your face dynamic texture inherited by Mario. </p> <p>0E - model part  00 - number of iterations through the texture hierarchy  00 - not sure but seems to match second byte </p> <p>If we want another Dynamic face texture, we would insert 0E0101 to the file. Adding multiple dynamic textures would increase the two trailing bytes, i.e. 0E0202, 0E0303, etc. After adding in the new dynamic textures, pad the word til it is 0x4 bytes total.</p> <p>| 0E00 0000                  | 0E00000E 01010000           | | 0E00000E 01010000          | 0E00000E 01010E02 02000000  | | 0E00000E 01010E02 02000000 | 0E00000E 01010E02 020E0303  |</p> <p>Inserting one new dynamic texture would look something like this.</p> <p>Notice how all the values after the inserted words have now changed. This means the pointers in the entire file have moved. This needs to be fixed. There is a provided pointerfix script created by Fray that will update all the pointers in your file. Save the character.bin and run the bass program. You have to provide the following in the script.</p> <p>filename - just the name of the file, not including extension offset - offset within the file where you are inserting new data shift - size of the insertion (probably needs to be in increments of 0x4)  internal_offset - \"Internal File Table Offset\" in the editor's game configuration window  external_offset - \"Internal File Resource Offset\" in the editor's game configuration window </p> <p>Get the internal offsets from game configuration</p> <p>the command would look like this: fix_pointers(brianmain, 0x198, 0x4, 0x114, 0x0)</p> <p>If we were to add in multiple dynamic textures, 0x4 would change from 0x4 to 0x8, or 0x12 depending on how many were added.</p> <p>If you want a dynamic texture on a bone other then the head, add it to the character file in the same location, and run the pointer fix application.</p> <p>i.e. 0E000015 00000000</p>"},{"location":"Wiki/characters/characterRigModification/#step-6-hex-editing-the-character-file-to-fix-unknown-value-data","title":"Step 6) Hex editing the character file to fix Unknown Value Data","text":"<p>This next section has to do with fixing joints associated with damage types, fixing the shield pose and other rig problems. The format will always be \"XXXX (YYYY):\" where XXXX is the offset in the file, and YYYY is where that piece of data is in relation to the Attribute Offset, so we mostly care about XXXX. This will help us find where in the file are the parts that we need to change.</p> <p>these are irrelevant and can be ignored, XXXX (0290): ???????? XXXX (0294): ???????? XXXX (0298): ????????</p> <p>we're not sure exactly what these are for but they need to be updated if the rig is modified or certain damage types will crash the game, XXXX (02A4): head bone id + 4 XXXX (02A8): left wrist bone id + 4 XXXX (02AC): right shin bone id + 4 XXXX (02B0): left shin bone id + 4 XXXX (02B4): right wrist bone id + 4 XXXX (02B8): 00000000 (from here and below is always 0 and can be ignored) XXXX (02BC): 00000000 XXXX (02C0): 00000000 XXXX (02C4): 00000000 XXXX (02C8): 00000000 XXXX (02CC): 00000000</p> <p>these are pointers to the shield pose file, if you import a new shield pose then the editor will automatically set up the shield pose pointers  XXXX (02D8): ???????? XXXX (02DC): ???????? XXXX (02E0): ???????? XXXX (02E4): ???????? XXXX (02E8): ???????? XXXX (02EC): ???????? XXXX (02F0): ???????? XXXX (02F4): ???????? XXXX (02F8): ????????</p> <p>this final section defines parts used by the slope contour command, and item/shield parts, they need to be updated if the rig is modified XXXX (02FC): left leg socket bone id + 4 XXXX (0300): ???????? XXXX (0304): right leg socket bone id + 4 XXXX (0308): ???????? XXXX (030C): left shoulder socket bone id + 4 XXXX (0310): ???????? XXXX (0314): right shoulder socket bone id + 4 XXXX (0318): ???????? XXXX (031C): ???????? XXXX (0320): ???????? - XXXX (0334): \"heavy item joint\" + 4 - XXXX (033C): item joint + 4 The way this works is by replacing the bone in the old file with the updated rigs position. This means that if a bone did not move, the value would remain the same. Conversely, if the bone has a different position in the hierarchy, it gets updated.</p> <p>Lets compare the rigs again:</p> Blender Bone Part # Mario Rig Brian Rig 0 Part00 Main bone base Main bone base 1 Part01 Hips (No Model attached) Hips (No Model attached) 2 Part02 Chest Chest 3 Part03 Socket Joint Left Arm Socket Joint Left Arm 4 Part04 Left Upper Arm mesh Left Upper Arm mesh 5 Part05 Left Lower Arm mesh Left Lower Arm mesh 6 Part06 Left Hand Left Hand 7 Part07 Neck (No model attached) item joint (Where items are attached to) 8 Part08 Head Potential Witheld Magic Part 9 Part09 Socket Joint Right Arm Neck (No model attached) 10 Part0A Right Upper Arm mesh Head 11 Part0B Right Lower Arm mesh Hair mesh 12 Part0C Right Hand Cape upper Mesh 13 Part0D item joint Cape Lower Mesh 14 Part0E Socket Left Joint leg Socket Joint Right Arm 15 Part0F Left Upper Leg mesh Right Upper Arm mesh 16 Part10 Left Lower Leg mesh Right Lower Arm mesh 17 Part11 Left Ankle Joint Right Hand 18 Part12 Left Foot Staff Mesh 19 Part13 Socket Right Joint leg Potential Withheld Magic Part 20 Part14 Right Upper Leg mesh Socket Left Joint leg 21 Part15 Right Lower Leg mesh Left Upper Leg mesh 22 Part16 Right Ankle Joint Left Lower Leg mesh 23 Part17 Right Foot Left Ankle Joint 24 Part18 Large item joint Left Foot 25 Part19 Socket Right Joint leg 26 Part1A Right Upper Leg mesh 27 Part1B Right Lower Leg mesh 28 Part1C Right Ankle Joint 29 Part1D Right Foot 30 Part1E Large item joint 31 Part1F 32 Part20 33 Part21 NOT A REAL PART NOT A REAL PART 34 Part22 NOT A REAL PART NOT A REAL PART <p>We have to remember that the values we are reading are the bones actual position in the rig +4. This means the following needs to happen:</p> <p>Left Leg socket bone id + 4</p> Mario Mario Bone-4 Brian-4 Brian 00000017 00000013 00000019 0000001D <p>Do this process for all values. If a bone did not move, leave it alone. If it did, update it.</p> <p>For Brian, this would mean the following:</p> Rig Part Information Mario's Rig Values Brian's Rig updated Values head bone id + 4 0734 (02A4): 0000000C 0734 (02A4): 0000000E left wrist bone id + 4 0738 (02A8): 0000000F 0738 (02A8): 00000014 right shin bone id + 4 073C (02AC): 00000014 073C (02AC): 0000001A left shin bone id + 4 0740 (02B0): 00000019 0740 (02B0): 0000001F right wrist bone id + 4 0744 (02B4): 00000009 0744 (02B4): 00000009 (did not change position) <p>if you import a new shield pose then the editor will automatically set up the shield pose pointers. the only time you'd need to update them is if you import a new model file over a ROM that doesn't have your sheild pose XXXX (02D8): ???????? XXXX (02DC): ???????? XXXX (02E0): ???????? XXXX (02E4): ???????? XXXX (02E8): ???????? XXXX (02EC): ???????? XXXX (02F0): ???????? XXXX (02F4): ???????? XXXX (02F8): ????????</p> <p>Final section for Brian would mean the following:</p> Rig Part Information Mario's Rig Values Brian's Rig updated Values Left leg socket bone id + 4 078C (02FC): 00000017 078C (02FC): 0000001D ???????? 0790 (0300): 42739062 0790 (0300): 42739062 Right leg socket bone id + 4 0794 (0304): 00000012 0794 (0304): 00000018 ???????? 0798 (0308): 42739062 0798 (0308): 42739062 Left shoulder socket bone id + 4 079C (030C): 0000000D 079C (030C): 00000012 ???????? 07A0 (0310): 420FA6E9 07A0 (0310): 420FA6E9 Right shoulder socket bone id + 4 07A4 (0314): 00000007 07A4 (0314): 00000007 (did not change position) XXXX (0318): ???????? 07A8 (0318): 420F8B44 07A8 (0318): 420F8B44 XXXX (031C): ???????? 07AC (031C): 42480000 07AC (031C): 42480000 XXXX (0320): ???????? 07B0 (0320): 3F060A92 07B0 (0320): 3F060A92 - - - \"heavy item joint\" + 4 07C4 (0334): 0000001C 07C4 (0334): 00000022 - - - item joint + 4 07CC (033C): 00000011 07CC (033C): 0000000B (moved to the other hand) <p>With all of this information, update the character bin file with the new bone values. </p> <p>Make sure to save.</p>"},{"location":"Wiki/characters/characterRigModification/#step-7-fix-the-hurt-boxes","title":"Step 7) Fix the hurt boxes","text":"<p>There are two approaches that can be taken to fix the bounding boxes. I am going to list both approaches here, but remember, we only need to do one. If you do the export from the editor approach, you need to do the bounding boxes after re-importing the modified character bin file. </p>"},{"location":"Wiki/characters/characterRigModification/#step-7a-hex-editing-the-hurt-boxes","title":"Step 7A) Hex editing the hurt boxes","text":"<p>begin by opening the CharacterDisplayLists.txt file we saved, at the top of the file you will see Main File: (file id) Offset XXXX, this \"Offset\" is the attribute offset and if we add 0x104 to that we'll have the offset of the first hurtbox:</p> <p>For Brian, this looks like: Main File: 00CB Offset 0490,  that means that the first hurt box is found at: 0490+0104 = 0594</p> <p>The format for hurtboxes looks like this  00000006 00000001 00000001 00000000 41200000 40800000 42CE0000 42E00000 42BE0000</p> <p>It can be broken down as follows: 00000006 - bone (remember that this value is the bone +4) 00000001 - damage animation that hurtbox uses 0 = low, 1 = mid, 2 = high  00000001 - boolean for grabable hurtbox 0 = can't be grabbed, 1 = can be grabbed  00000000 41200000 40800000 - float32 x/y/z offset  42CE0000 42E00000 42BE0000 - float32 x/y/z size </p> <p>For Mario, this first bone is attached to chest. Brian's rig leaves that bone the same. So the bone value does not need updating. The size may however. Increase or decrease the sizes and position as needed. This can only be checked inside Smash Remix itself. </p> <p>the hurtboxes all appear back to back in the file and there's 11 total, if a character doesn't use all 11 you'll see FFFFFFFF 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 where they end. Mario uses only 10 of the hurt boxes. Whilst Fox uses all 11 hurtboxes. They often have the following order and format: LOWER BODY  UPPER BODY  HEAD  RIGHT SHOULDER  LEFT SHOULDER  RIGHT FOREARM  LEFT FOREARM  RIGHT LEG  LEFT LEG  RIGHT SHIN  LEFT SHIN</p> <p>Lets look back at our rig again.</p> Blender Bone Part # Mario Rig Brian Rig 0 Part00 Main bone base Main bone base 1 Part01 Hips (No Model attached) Hips (No Model attached) 2 Part02 Chest Chest 3 Part03 Socket Joint Left Arm Socket Joint Left Arm 4 Part04 Left Upper Arm mesh Left Upper Arm mesh 5 Part05 Left Lower Arm mesh Left Lower Arm mesh 6 Part06 Left Hand Left Hand 7 Part07 Neck (No model attached) item joint (Where items are attached to) 8 Part08 Head Potential Witheld Magic Part 9 Part09 Socket Joint Right Arm Neck (No model attached) 10 Part0A Right Upper Arm mesh Head 11 Part0B Right Lower Arm mesh Hair mesh 12 Part0C Right Hand Cape upper Mesh 13 Part0D item joint Cape Lower Mesh 14 Part0E Socket Left Joint leg Socket Joint Right Arm 15 Part0F Left Upper Leg mesh Right Upper Arm mesh 16 Part10 Left Lower Leg mesh Right Lower Arm mesh 17 Part11 Left Ankle Joint Right Hand 18 Part12 Left Foot Staff Mesh 19 Part13 Socket Right Joint leg Potential Withheld Magic Part 20 Part14 Right Upper Leg mesh Socket Left Joint leg 21 Part15 Right Lower Leg mesh Left Upper Leg mesh 22 Part16 Right Ankle Joint Left Lower Leg mesh 23 Part17 Right Foot Left Ankle Joint 24 Part18 Large item joint Left Foot 25 Part19 Socket Right Joint leg 26 Part1A Right Upper Leg mesh 27 Part1B Right Lower Leg mesh 28 Part1C Right Ankle Joint 29 Part1D Right Foot 30 Part1E Large item joint 31 Part1F 32 Part20 33 Part21 NOT A REAL PART NOT A REAL PART 34 Part22 NOT A REAL PART NOT A REAL PART <p>The hurt boxes bone placements and updates are as follows:</p> <p>00000006 00000001 00000001 00000000 41200000 40800000 42CE0000 42E00000 42BE0000</p> <p>0000000C 00000002 00000001 00000000 42880000 41000000 43140000 430C0000 430A0000</p> <p>0000000E 00000001 00000000 41700000 00000000 00000000 42100000 42480000 42480000</p> <p>00000008 00000001 00000000 41700000 00000000 00000000 42100000 42480000 42480000</p> <p>0000000F 00000001 00000000 41F00000 00000000 00000000 42680000 42580000 42580000</p> <p>00000009 00000001 00000000 41F00000 00000000 00000000 42680000 42580000 42580000</p> <p>00000018 00000000 00000000 41B00000 00000000 00000000 42680000 42860000 42860000</p> <p>00000013 00000000 00000000 41B00000 00000000 00000000 42680000 42860000 42860000</p> <p>00000019 00000000 00000000 41E00000 00000000 00000000 42840000 429C0000 42980000</p> <p>00000014 00000000 00000000 41E00000 00000000 00000000 42840000 429C0000 42980000</p> <p>FFFFFFFF 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000</p> Mario Mario Bone-4 Brian-4 Brian Chest 00000006 00000002 00000002 00000006 (did not change position) Head 0000000C 00000008 0000000A 0000000E Right Upper arm mesh 0000000E 0000000A 0000000F 00000013 Left Upper arm mesh 00000008 00000004 00000004 00000008 (did not change position) Right Lower arm mesh 0000000F 0000000B 00000010 00000014 Left Lower arm mesh 00000009 00000005 00000005 00000009 (did not change position) Right Upper Leg mesh 00000018 00000014 0000001A 0000001E Left Upper Leg mesh 00000013 0000000F 00000015 00000019 Right Lower Leg Mesh 00000019 00000015 0000001B 0000001F Left Lower Leg Mesh 00000014 00000010 00000016 0000001A Empty FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF <p>It is important to fix the bounding box sizes, but for the sake of a solid rig, I am skipping those adjustments for now. There is a seperate section associated with how to adjust the hurt boxes. </p> <p>Make sure to update every bone to the new values.</p>"},{"location":"Wiki/characters/characterRigModification/#step-7b-using-an-ide-to-modify-the-hurt-boxes-do-this-before-you-do-hex-edits","title":"Step 7B) Using an IDE to modify the hurt boxes (DO THIS BEFORE YOU DO HEX EDITS)","text":"<p>Now that the rig is set up with the proper bones and withheld parts, we have to fix the bounding boxes. Export the bounding box, load into Maya. </p> <p>Tweak the boxes, unbind them from the current bones and rebind them to the correct bones. We need to move them to the correct bones. the best approach is to export the model before all the editing. and use it as a reference. Line up the old bones to the new ones, move the box. tweak the size and re-import when done. The best way to remove the rig, but not the box is to goto edit, delete by type history and it will unbind all the boxes. Do this and re import over the character as needed. DO THIS BEFORE YOU DO HEX EDITS.</p>"},{"location":"Wiki/characters/characterRigModification/#step-8-importing-the-modified-character-bin","title":"Step 8) Importing the modified Character Bin","text":"<p>Once all values are changed. Save the modified file and reimport. To do this, first save your currently edited rom. It is best to not override you original rom. Make a copy.</p> <p>Now goto game configuration</p> <p>Choose your modified rom. Then location the character you are overridings main file Click inject File and choose the file you hex edited.</p> <p>Once injected, write a new rom. One can choose to override the current rom, but remember, if you made a mistake in which file you changed, you will have to do all prior steps again.</p>"},{"location":"Wiki/characters/characterRigModification/#step-9-adjusting-the-hurt-boxes","title":"Step 9) Adjusting the Hurt boxes","text":"<p>I like using bizhawk to do it because you can add all the float32 coordinates to a ram watch and then change the type to float you have to freeze them and reset training mode for the change to be visible tho 800D81BD 0049 is a gs code that turns hitbox display on then I would go to 800D6300 which is the main file table, find the file id for the main file and next to it is a pointer to where it's loaded in memory go to that pointer and scroll down to where the hurtboxes are, then you can select them all and add them to a RAM watch, and change the display type to float and then freeze them all then you can freely poke/edit the values and just reset training mode to see it take effect once you are done you can make a savestate to make sure the frozen values stick, and then load the savestate and copy/paste the hurtboxes out of RAM into the character file that's how I have always done it anyway, I guess it's kind of a tedious process if you haven't done it before tho</p>"},{"location":"Wiki/characters/characterRigModification/#step-10-fix-the-shield-pose","title":"Step 10) Fix the Shield pose","text":"<p>https://joaorb64.github.io/smash64-modding-wiki/Wiki/characters/shieldpose/#base-shield-pose</p> <p>Follow these instructions provided by Shino.</p> <p>As an addendum, The shield pose has two approaches to getting it work. If your shield rig includes withheld parts, you need to import with the following option: Force Re-enabled Skipped Tracks.</p> <p>This will make sure the animation and the shield pose align. A better approach, is that while following the Shield Pose Guide, while adding in the new root bone, ALSO remove withheld parts. Then you do not need this special option when importing the ShildOn pose.</p>"},{"location":"Wiki/characters/characterRigModification/#step-11-import-the-characters-model-data","title":"Step 11) Import the characters model data.","text":"<p>This rom should be known as your base rom. File sizes get larger and larger the more times you add/tweak change the characters model. Even if you are fixing a color import. Keep this rom and never override it. As if you decided to modify your model, you will go back to this rom. Go back to the animation editor:</p> <p>Click import and add textures:</p> <p>Follow the steps to import your character. Then save.</p> <p>Now it is the moment of truth. Lets test the character.</p>"},{"location":"Wiki/characters/characterRigModification/#step-12-special-parts","title":"Step 12) Special Parts","text":"<p>Now that we have the charter model inside the rom, lets also import special parts. Special parts can be alternate models for your character (such as a head swap or a different hand), or can be a model that is hidden and only called in for specific actions (such as Ness's yoyo or Fox's gun.) To set up a special parts, one has to take the character rig, attach the special part to the correct bone in the desired location and then export the rig with just that part attached. Do this for all special parts one wants to import.</p> <p>Once you have all the model parts exported to separate fbx files,  we need to step through the process to add each part systematically. </p>"},{"location":"Wiki/characters/characterRigModification/#step-12a-special-parts-that-already-exist","title":"Step 12a) Special Parts that already exist","text":"<p>If the bone in question has an old special part that can be replaced, click import from obj if added if the textures have already been imported in a prior step or click import from object and add if you have to add the new textures.</p> <p>Follow the prompts. (i.e. select textures, model and special textures)</p> <p>This will replace the model that is already present. If you notice for example on our rig, Special part 06 has Extra 00 Hi and Extra 00 low. This is the high poly model for the special part and the low poly model for the special part. Make sure to import for both.</p>"},{"location":"Wiki/characters/characterRigModification/#step-12b-adding-new-special-parts","title":"Step 12b) Adding new special parts","text":"<p>Lets look at the rig again to figure out what needs to be added:</p> Blender Bone Part # Function Special Part additions 0 Part00 Main bone base 1 Part01 Hips (No Model attached) 2 Part02 Chest 3 Part03 Socket Joint Left Arm 4 Part04 Left Upper Arm mesh 5 Part05 Left Lower Arm mesh 6 Part06 Left Hand Flat Hand Special Part 7 Part07 item joint (Where items are attached to) Wisp Special Part 8 Part08 Potential Witheld Magic Part 9 Part09 Neck (No model attached) 10 Part0A head 11 Part0B Hair mesh 12 Part0C Cape upper mesh 13 Part0D Cape Lower mesh 14 Part0E Socket Joint Right Arm 15 Part0F Right Upper Arm mesh 16 Part10 Right Lower Arm mesh 17 Part11 Right Hand 18 Part12 Staff mesh 19 Part13 Potential Withheld Magic Part 20 Part14 Socket Left Joint leg 21 Part15 Left Upper Leg mesh 22 Part16 Left Lower Leg mesh 23 Part17 Left Ankle Joint 24 Part18 Left Foot 25 Part19 Socket Right Joint leg 26 Part1A Right Upper Leg mesh 27 Part1B Right Lower Leg mesh 28 Part1C Right Ankle Joint 29 Part1D Right Foot 30 Part1E Large item joint Chest Special Part <p>First, find the bone you want to add the special part to and select it in the drop down menu in the special part section of the animation editor.  Click Add special part with the correct bone in the drop down menu to add the space for the part.</p> <p>Given this special part is the first to be added to this specific bone, we just need to follow the standard import steps to add the new model. </p> <p>If you are adding a new special part to a bone that already has a model attached to it, when you click add special part, a pop up will appear and extra steps need to be followed:</p> <p>This popup it telling us that we need to add a moveset command to any moveset to complete the import. </p> <p>This window will eventually pop up. One has to click on a command, select \u201cSet Model Form Part\u201d from the Add drop down menu, and add in the correct bone and set the value to 1. </p> <p>This is one of the few times the editor does not use HEX, but we still have to add +4 to the bone. So, for reference:</p> Blender Bone Part # Part Value 30 Part1E 34 1 <p>Notice in the screenshot that the bone is 34, which then shows the part number and the Hex number in the command window. This is a good gage for if you have put in the correct bone. If you mess up on this step, you need to redo the entire model because you are shooting for the smallest character file one can.</p> <p>Once the command is added, just click the X to close the window. It will automatically add the model and special part to the correct bone.</p> <p>Repeat this process for every special part you plan to add.</p> <p>If you are adding in more special parts to the same bone, the values you use need to be incremented. The first new addition needs to be value of 1. Whilst the next would be </p> <p>If you want to add in more, the value increases (per the instructions above.) i.e. If we add another special part to Bone 1E, we would have to set the value to 2. And a third special part would have the value of 3.</p>"},{"location":"Wiki/characters/modelimport/","title":"Importing character models","text":""},{"location":"Wiki/characters/modelimport/#character-polygon-count-reference","title":"Character polygon count reference","text":"Smash Models High Poly Tris Low Poly Tris Bones Tris Logo Mario 320 200 197 92 Captain Falcon 319 200 151 91 Donkey Kong 318 200 195 85 Fox 306 193 175 95 Jigglypuff 319 200 186 78 Kirby 256 182 182 58 Link 338 207 141 3 Luigi 320 200 197 92 Ness 318 199 167 219 Pikachu 317 197 162 78 Samus 326 199 198 40 Yoshi 320 201 178 99 Range Highest 338 207 198 219 Lowest 256 182 141 3 Median 317 200 175 85"},{"location":"Wiki/characters/shieldpose/","title":"Shield Pose","text":"<p>Shield pose requires some extra steps to make work correctly. It's not fun but also not impossible.</p> <p>This guide is based on Fray's notes on shield animations. It's recommended to also read through his guide before starting.</p>"},{"location":"Wiki/characters/shieldpose/#shieldon-shieldoff","title":"ShieldOn, ShieldOff","text":"<p>Create your shieldOn and shieldOff animations and import over your character. Keep default flags (<code>0xA0000000</code>).</p> <p>Place the last bone where the shield will be: The last frame of your shieldOn animation will be used for the neutral shield pose.</p> Animation Frames (Blender) Duration (Blender) shieldOn 1-5 4 shieldOff 1-13 12"},{"location":"Wiki/characters/shieldpose/#preparations-for-the-shield-pose-file","title":"Preparations for the shield pose file","text":"<p>The shield pose is its own file with its own rig. This rig has 1 extra root bone compared to your character rig.</p> <ul> <li>Open your shieldOn animation in your 3d editor, clean up to only have the last frame</li> <li>Start from the last bone renaming all to <code>bone+1</code>. So if your last bone is 25, change it to 26. The last edit will be bone <code>0\u21921</code>.</li> <li>Create a new bone without any transforms and name it <code>0</code>.</li> <li>Make <code>0</code> parent of <code>1</code> (your old <code>0</code>). So now you have a new root bone.</li> <li>Get the last bone (grab bone, which is the shield position) and change parent from <code>1</code> to <code>0</code></li> </ul> <p>Your structure should look like this:</p> <p>For all shield pose imports, use this new base.</p>"},{"location":"Wiki/characters/shieldpose/#base-shield-pose","title":"Base shield pose","text":"<p>Delete all model parts from your file (save as a new file!) and export your model as <code>shield_base.fbx</code>. So this should be just the final frame of shieldOn but with the modified bone structure.</p>"},{"location":"Wiki/characters/shieldpose/#angled-shield-poses","title":"Angled shield poses","text":"<p>Using the modified bone structure, we have to create 8 FBX files. Each one is 1/8 of the 360 degree rotation you can do while shielding.</p> <pre><code>1. Right \u2192 Top-right\n2. Top-right \u2192 Top\n3. Top \u2192 Top-left\n4. Top-left \u2192 Left\n5. Left \u2192 Bottom-left\n6. Bottom-left \u2192 Bottom\n7. Bottom \u2192 Bottom-right\n8. Bottom-right \u2192 Right\n</code></pre> <p>Start by animating the 8 keyframes as listed. Each section must have 45 frames. So you'll have keyframes at 1, 46, 91...</p> <p>Fray made an interactive graph to calculate shield positions that follows Smash 64's shield angle positions.</p> This is the second position, Top-right.Here, bone 26 is my shield position bone.Do not add extra frames in any section. <p>After you have your animation ready, let's export (save a backup!):</p> <ul> <li>Delete all sections leaving only one of them. For example, 1-46 for the first file.</li> <li> <p>Export as FBX. Name each FBX from 1 to 8 while you go for each part.</p> <p>If using Blender, uncheck \"Add Leaf Bones\" and under Animation set Sampling Rate to 45. This will make it so the exported file has only the 2 frames we want, without extra frames in-between.</p> </li> </ul>"},{"location":"Wiki/characters/shieldpose/#importing","title":"Importing","text":"<p>Here you're expected to have already imported your shieldOn and shieldOff animations.</p> <ul> <li>In GE, open your character's shield pose file</li> <li>Click on <code>Import Different Rig</code> and import your <code>shield_base.fbx</code> (base shield pose)</li> <li>On the bottom right, on the Special Parts, you'll start with <code>Misc 00</code> selected. Click on <code>Import from Obj If Added</code> and import <code>shield_base.fbx</code> (base shield pose) again.</li> </ul> <p>Now, note that in the Misc Part selection we have <code>Misc 1..8</code>. These are the shield angles.</p> <ul> <li>Select <code>Misc 01</code>. Click on <code>Edit tracks</code>.</li> <li>Click on <code>Reset all commands</code> to delete everything that's there.</li> <li>By the bottom part, click on <code>Import Animation from .obj</code>. Import the correspondent fbx file for section 1.</li> <li>Close the window, and you can cancel both save prompts that might open up.</li> <li>Repeat the process for all 8 parts.</li> </ul>"},{"location":"Wiki/characters/shieldpose/#other-notes","title":"Other notes","text":""},{"location":"Wiki/characters/shieldpose/#files","title":"Files","text":"<ul> <li>Note that shieldOn and shieldOff might have different <code>Internal File Table Offsets</code>.</li> <li>Editing the shield pose changes things in the characters' <code>main</code> file.<ul> <li>In the <code>main</code> file, the shield pose is listed at 0x2D8..0x2F8. It's a linked list with 9 entries.</li> <li>This linked list has entries in the format <code>XXXXYYYY</code>, where <code>XXXX * 4</code> is the address of the next entry in the list, and <code>YYYY</code> is the data.</li> <li>If your <code>main</code> file is not synced with your shield pose, you can copy the data of all entries from a working <code>main</code> file to the new <code>main</code> file to make it work with the shield pose.</li> </ul> </li> </ul>"},{"location":"Wiki/characters/shieldpose/#issues","title":"Issues","text":"<ul> <li>If your shield pose is too large (should be around 30 kB or so) it means your section files had extra frames other than the first and last. I think this can lead to the game not loading at all, too.</li> <li>If at any point of shielding the shield position or the model itself gets rotated, you have some extra rotation on bone 0 or the model object itself. Check that, re-export and re-import what you changed.</li> <li>If you model's parts \"explode\" ingame, it means you didn't edit the bone structure properly or accidentally used the unedited one.</li> </ul>"},{"location":"Wiki/characters/transparenttextures/","title":"Transparent Textures","text":""},{"location":"Wiki/characters/transparenttextures/#adding-transparency","title":"Adding transparency","text":"<ul> <li>Enable the texture flag for transparency</li> <li>Use pure black wherever you want transparency in your texture</li> </ul>"},{"location":"Wiki/characters/transparenttextures/#changing-alpha-color","title":"Changing alpha color","text":"<ul> <li>Change pure black to desired color</li> <li>Re-import character in GE Model Editor</li> <li><code>Export Character File</code> and open the .bin in a hex editor</li> <li>Note your texture's <code>Palette Address</code> in GE Model Editor</li> <li>Go to the <code>Palette Address</code> of your texture in a hex editor</li> <li>Find your new color in hex (each color is 2 bytes long) and subtract 1<ul> <li>Texture64 can help with identifying the colors</li> </ul> </li> <li>Import updated character file through the Game Configuration window</li> </ul>"},{"location":"Wiki/software/blender/","title":"Blender","text":"<ul> <li> <p>First/last animation frames: the game doesn't display the new animation until the 2nd frame, and doesn't display the last frame either. One exception would be a move with a frame 1 hitbox that connects: the hitlag will use the first animation frame. Because of that, most of the time you'll want to use your idle pose (or corresponding aerial pose) as first and last animation frames.</p> </li> <li> <p>Animations must be animated at 60 fps but exported as 30fps to import correctly</p> </li> <li> <p>To avoid animating special parts, hide them by hitting H during pose mode</p> </li> </ul>"},{"location":"Wiki/software/blender/#texture-flags","title":"Texture Flags","text":"<p>You can set these flags on a per-material basis by adding them to the material's name</p> <p>Texture repeat mode flags, S = Side, T = Top:</p> <ul> <li>_ClampS</li> <li>_ClampT<ul> <li>Clamp is same as Extend in Blender</li> </ul> </li> <li>_MirrorS</li> <li>_MirrorT<ul> <li>Mirror is the same as Mirror in Blender</li> </ul> </li> </ul> <p>Other flags:</p> <ul> <li>_EnvMapping<ul> <li>Metal Mario style environment mapping</li> </ul> </li> <li>_CullBoth<ul> <li>Disables backface culling</li> </ul> </li> <li>_Transparent<ul> <li>Enables transparency on texture, default alpha color is pure black<ul> <li>If you want to change the alpha color, refer to related sections for Stage or Character textures</li> </ul> </li> </ul> </li> </ul>"},{"location":"Wiki/stages/","title":"Index","text":"<p>Stage editing</p>"},{"location":"Wiki/stages/stageimport/","title":"Stage Importing","text":""},{"location":"Wiki/stages/stageimport/#rooms-and-types","title":"Rooms and types","text":"<p>TODO</p>"},{"location":"Wiki/stages/stageimport/#vertex-coloring","title":"Vertex Coloring","text":"<p>TODO</p> <ul> <li>Do not skip rooms!!!</li> </ul>"},{"location":"Wiki/stages/stageimport/#blender","title":"Blender","text":""},{"location":"Wiki/stages/stageimport/#previewing-the-model","title":"Previewing the model","text":"<p>From the game's source code: ingame camera fov: 38</p>"},{"location":"Wiki/stages/stageimport/#viewing-and-editing-vertex-colors","title":"Viewing and editing vertex colors","text":"Vertex Paint mode <p> Use vertex paint mode to view and edit vertex colors. </p> Viewing the whole scene's vertex colors <p> Use this view mode to render only vertex colors. </p>"},{"location":"Wiki/stages/stageimport/#baking-lights-to-vertex-colors","title":"Baking lights to vertex colors","text":"<ul> <li>Add lights to your scene</li> <li>Set a view to render only lights for preview</li> </ul> View scene lights <p> Use this view mode to render only diffuse colors (lights and shadows). </p> <ul> <li>Select one of your Room objects</li> <li>Go into Vertex Coloring mode</li> <li>Bake lights to vertex colors</li> </ul> Bake lights <p> Note we're baking direct Diffuse lights into Active Color Attribute (Vertex Colors). </p>"},{"location":"Wiki/stages/stageimport/#transparent-textures","title":"Transparent Textures","text":""},{"location":"Wiki/stages/stageimport/#adding-transparency","title":"Adding transparency","text":"<ul> <li>Enable the texture flag for transparency</li> <li>Use pure black wherever you want transparency in your texture</li> </ul>"},{"location":"Wiki/stages/stageimport/#changing-alpha-color","title":"Changing alpha color","text":"<ul> <li>In Pixelformer, change the <code>Target color format</code> to <code>RGB color with alpha channel (32 bpp)</code> mode<ul> <li>If not using Pixelformer, you will need to follow these steps instead, even if using a single alpha color, as most other programs do not export .bmp alpha at all, or just not in a way that GE reads properly.</li> </ul> </li> <li>Choose the color you want to use for transparency, set it's alpha to 0 and fill in all transparent areas with it</li> <li>Export texture as <code>A8:R8:G8:B8 (32 bpp)</code> with no other options ticked</li> </ul>"},{"location":"Wiki/stages/stageimport/#multiple-alpha-colors","title":"Multiple alpha colors","text":"<ul> <li>Same steps as above, but with multiple alpha 0 colors instead of a single color</li> <li>Re-import stage in GE, note which colors are still non-transparent in-game</li> <li>Export stage file from Game Configuration and open the .bin in a hex editor</li> <li>Manually find where the palette address for your updated texture is</li> <li>Find hex value of each non-transparent color (each color is 2 bytes long) and subtract 1 from them</li> </ul>"},{"location":"Wiki/stages/stageimport/#model-proportions","title":"Model proportions","text":""},{"location":"Wiki/stages/stageimport/#blender_1","title":"Blender","text":"<p>Proportion when exporting using default FBX settings: 1 m in Blender = 100 units in Smash 64. This means a vertex at (90, 0, 83) will be located at (9000, 0, 8300) in the game.</p>"},{"location":"Wiki/stages/stageimport/#frequent-issues","title":"Frequent Issues","text":"<ul> <li>Stage elements are flickering: The geometry is probably too far away from the camera.</li> <li>Whole rooms move when the camera moves: The geometry extends too far away from 0,0,0.</li> <li>Textures wrap when the camera moves: You have planes that are too big. Try subdividing huge geometry into smaller pieces.</li> <li>Vertex colors are not working:<ul> <li>Your file should not be skipping Rooms. Check if you're skipping Room numbers and try again (Should go from 0, 1, 2, and so on)</li> <li>Try a few more times. Sometimes it's random and should work in ~5 tries</li> <li>If all else fails, you'll have to unfortunately try importing to a fresh ROM</li> </ul> </li> </ul>"},{"location":"Wiki/testing/shieldpose/","title":"Shield Pose","text":"<p>Todo</p>"},{"location":"Wiki/testing/test/","title":"Creating GFX based on Falcon Punch graphics","text":"<p>Original Descriptor Source: https://github.com/VetriTheRetri/ssb-decomp-re/blob/7e437d81a74fcd03e72847934b2e4e44e43ea380/src/ef/efmanager.c#L827 <pre><code>efCreateDesc dEFFalconPunchEffectDesc =\n{\n    EFFECT_FLAG_USERDATA,                   // Flags\n    15,                                     // DL Link\n    &amp;gFTDataCaptainSpecial3,                // Texture file\n\n    // DObj transformation struct 1\n    {\n        0x50,                               // Main matrix transformations\n        OMMtx_Transform_RotRpyR,            // Secondary matrix transformations\n        0x00                                // ???\n    },\n\n    // DObj transformation struct 2\n    {\n        OMMtx_Transform_Null,               // Main matrix transformations\n        OMMtx_Transform_Null,               // Secondary matrix transformations\n        0x00                                // ???\n    },\n\n    func_ovl2_800FD5D8,                     // Proc Update\n    func_ovl0_800CB4B0,                     // Proc Render\n\n    &amp;lEFFalconPunchDObjSetup,               // DObj Setup attributes offset (?)\n    &amp;lEFFalconPunchMObjSub,                 // MObjSub offset\n    0x0,                                    // AnimJoint offset\n    &amp;lEFFalconPunchMatAnimJoint             // MatAnimJoint offset\n};\n</code></pre></p> <ul> <li>Edit Falcon Punch effect in vanilla using GE.</li> <li>You can export Falcon Punch, add textures using Special textures, then reimport the model.</li> <li> <p>If the graphic ends up dark ingame, you should update the shading color in GE to white.</p> </li> <li> <p>Open game in emulator, add breakpoint at <code>0x80101ED8</code> = <code>dEFFalconPunchEffectDesc</code></p> </li> <li>Right at the start of the function, it loads the address to A0. It has the whole struct. Copy any offsets from there</li> </ul> <p>Example: <pre><code>punch_anim_struct_TEST:\n    dw  0x020F0000\n    dw  Character.TEST_file_8_ptr\n    dw  0x501C0000\n    OS.copy_segment(0xA9AF8, 0x0008)\n    dw  my_update_routine_ // Here, I'm overwriting the ProcRender function\n    dw  0x00000040 // copied from the game's memory when playing ROM\n    dw  0x000001A0 // copied from the game's memory when playing ROM\n    dw  0x00000000 // copied from the game's memory when playing ROM\n    dw  0x000001FC // copied from the game's memory when playing ROM\n</code></pre></p>"}]}